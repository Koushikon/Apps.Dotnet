@page "/"

@* Added Nuget package feature *@
@using System.Net.Http.Json

@*
    Factory recognizes handles the creation, reuse and removal of HttpClient
*@
@inject IHttpClientFactory factory
@inject TokenInfo tokenInfo

<PageTitle>Index</PageTitle>

@if (_isLoggedIn)
{
    <h3 class="card-title text-center fw-bold">Already logged in.</h3>

    <div class="text-end">
        <button type="button" class="btn btn-danger" @onclick="LogOut">Log Out</button>
    </div>
}
else
{
    <div class="card mx-auto" style="width: 25rem;">
        <div class="card-body">
            <h3 class="card-title text-center fw-bold">Login</h3>
            <EditForm Model="_login" OnValidSubmit="SubmitForm">
                <div class="mb-3">
                    <label for="txtUserName" class="form-label">Email address</label>
                    <InputText @bind-Value="_login.UserName" id="txtUserName" class="form-control" placeholder="Username" required></InputText>
                </div>
                <div class="mb-3">
                    <label for="txtPassword" class="form-label">Password</label>
                    <InputText @bind-Value="_login.UserPassword" id="txtPassword" class="form-control" type="password" placeholder="Password" required></InputText>
                </div>
                <div class="text-center">
                    <button type="submit" class="btn btn-success">Log In</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code{
    private Authentication _login = new();
    private bool _isLoggedIn = false;

    protected override void OnInitialized()
    {
        _isLoggedIn = !string.IsNullOrWhiteSpace(tokenInfo.Token);
    }

    private async void SubmitForm()
    {
        var client = factory.CreateClient("api");

        var info = await client.PostAsJsonAsync<Authentication>("Authentication/tokenize", _login);
        tokenInfo.Token = await info.Content.ReadAsStringAsync();
        _isLoggedIn = true;
        await InvokeAsync(StateHasChanged);
    }

    private void LogOut()
    {
        tokenInfo.Token = string.Empty;
        _isLoggedIn = false;
    }
}