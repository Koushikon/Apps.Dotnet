@page "/data"

@using System.Net.Http.Headers
@using System.Net.Http.Json

@inject IHttpClientFactory factory
@inject TokenInfo tokenInfo

<PageTitle>Todos</PageTitle>

<h1>Todo List</h1>

<button type="button" class="btn btn-primary" @onclick="FetchTodos">Get List of Todo</button>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="h4 mt-3 text-danger">@errorMessage</div>
}

@if (todos is not null)
{
    <div class="card mx-auto mt-3">
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Task</th>
                        <th scope="col">Added By</th>
                        <th scope="col">Complete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in todos)
                    {
                        <tr class=@((Convert.ToBoolean(item.IsComplete)) ? "bg-success text-white" : "bg-secondary text-white")>
                            <th scope="row">@item.Id</th>
                            <td>@item.Task</td>
                            <td>@item.AssignTo</td>
                            <td>
                                <button type="button" class="btn btn-primary me-2">Update</button>
                                @if (!Convert.ToBoolean(item.IsComplete))
                                {
                                    <button type="button" class="btn btn-warning" @onclick="() => MakeComplete(item)">Done</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Todo>? todos;
    private HttpClient? client;
    private string errorMessage = string.Empty;

    private async void FetchTodos()
    {
        errorMessage = "";
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            todos = await client.GetFromJsonAsync<List<Todo>>("Todos");
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void MakeComplete(Todo todo)
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        await client!.PutAsJsonAsync<string>($"Todos/{todo.Id}/Complete", "");

        //FetchTodos();
        // Or can do
        todo.IsComplete = true;

        await InvokeAsync(StateHasChanged);
    }
}